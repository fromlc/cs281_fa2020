/******************************************************************************
* Element.cpp
* CS 281-0798, Fall 2020
*
* Element pure abstract class definition
*******************************************************************************
*/
#include <string>

#include "Element.h"


//***********************************************************
// Element() not used for pure abstract class
//***********************************************************

//***********************************************************
// setId() not used because constructor sets m_id
//***********************************************************

//***********************************************************
// getId() 
//***********************************************************
int Element::getId() const
{
    return m_id;
}

//***********************************************************
// setName()
//***********************************************************
bool Element::setName(const std::string& name)
{
    m_name = name;
    return true;
}

//***********************************************************
// getName()
//***********************************************************
bool Element::getName(std::string& name) const
{
    name = m_name;
    return true;
}

//***********************************************************
// setPoints()
//***********************************************************
bool Element::setPoints(int points)
{
    m_points = points;
    return true;
}

//***********************************************************
// getPoints()
//***********************************************************
int Element::getPoints() const
{
    return m_points;
}

//***********************************************************
// addPoints()
//
// adds passed value to container's points
//***********************************************************
int Element::addPoints(int points)
{
    m_points += points;
    return true;
}

//***********************************************************
// setText()
//***********************************************************
bool Element::setText(const std::string& text)
{
    m_text = text;
    return true;
}

//***********************************************************
// getText()
//***********************************************************
bool Element::getText(std::string& text) const
{
    text = m_text;
    return true;
}
